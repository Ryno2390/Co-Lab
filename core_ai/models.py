from pydantic import BaseModel, Field
from typing import List, Optional, Any, Dict
import uuid

class UserInput(BaseModel):
    """
    Represents the initial input from the user.
    """
    session_id: Optional[str] = Field(default_factory=lambda: str(uuid.uuid4()))
    prompt: str = Field(..., description="The user's natural language prompt.")
    user_id: Optional[str] = None # Optional user identifier for context/personalization/billing
    # Add other potential fields like preferred_response_format, context_window_size etc.

class SubTask(BaseModel):
    """
    Represents a decomposed sub-task generated by the Decomposer LLM.
    """
    sub_task_id: str = Field(default_factory=lambda: f"subtask_{uuid.uuid4()}")
    instruction: str = Field(..., description="The specific instruction for the Sub-AI.")
    original_prompt_ref: Optional[str] = None # Reference to the original UserInput prompt ID if needed
    # Potential future fields: required_domain, priority, dependencies

class SubAIResponse(BaseModel):
    """
    Represents the response received from a Sub-AI (fixed or dynamic).
    """
    sub_task_id: str = Field(..., description="The ID of the sub-task this response addresses.")
    source_sub_ai_id: str = Field(..., description="Identifier of the Sub-AI that generated the response (e.g., 'financial-analyzer-v1.2' or 'dynamic-base-model-instance-xyz').")
    content: Any = Field(..., description="The actual content of the response (can be text, JSON, etc.). Needs pre-processing before synthesis.")
    status: str = Field(default="success", description="Status of the Sub-AI execution ('success', 'error').")
    error_message: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None # e.g., CIDs referenced, confidence score

class FinalResponse(BaseModel):
    """
    Represents the final synthesized response presented to the user.
    """
    session_id: str
    original_prompt: str
    synthesized_answer: str = Field(..., description="The final, coherent answer generated by the Synthesizer LLM.")
    status: str = Field(default="success", description="Overall status ('success', 'partial_success', 'error').")
    error_message: Optional[str] = None
    # Potential future fields: attribution_details, cost_in_tokens